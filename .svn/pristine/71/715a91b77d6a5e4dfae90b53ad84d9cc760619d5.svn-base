import {
    baseUrl
} from './env'

export default async(type = 'GET', url = '', data = {}, method = 'fetch') => {
    type = type.toUpperCase();
    url = baseUrl + url;

    if (type === 'GET') {
        let dataStr = '';
        Object.keys(data).forEach(key => {
            dataStr += key + '=' + data[key] + '&';
        })

        if (dataStr !== '') {
            dataStr = dataStr.substr(0, dataStr.lastIndexOf('&'));
            url = url + '?' + dataStr;
        }
    }

    if (window.fetch && method === 'fetch') {
        let requestConfig = {
            credentials: 'include',
            method: type,
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            mode: 'cors',
            cache: 'force-cache'
        }

        if (type === 'POST') {
            Object.defineProperty(requestConfig, 'body', {
                value: JSON.stringify(data)
            })
        }
        if (type === 'PUT') {
            Object.defineProperty(requestConfig, 'body', {
                value: JSON.stringify(data)
            })
        }
        try {
            var response = await fetch(url, requestConfig);
            var responseJson = await response.json();
        } catch (error) {
            throw new Error(error)
        }
        return responseJson
    } else {
        return new Promise((resolve, reject) => {
            let client = new XMLHttpRequest();

            let sendData = '';
            if (type === 'POST') {
                sendData = JSON.stringify(data);
            }

            client.open(type, url, true);
            client.responseType = 'json';
            client.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            client.send(sendData);

            client.onreadystatechange = () => {
                let status = client.status;
                if (status !== 4) {
                    return;
                }

                if (status === 200) {
                    resolve(client.response);
                } else {
                    reject(new Error(client.statusText));
                }
            };
        });
    }
}
